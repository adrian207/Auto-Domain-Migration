---
# Role: post_migration_validation
# Purpose: Validate successful migration and verify functionality
# Target: Target domain controller and migrated objects

- name: Validate post-migration state
  block:
    - name: Verify migrated user accounts exist
      ansible.windows.win_shell: |
        $users = @({{ migrated_users | map('quote') | join(',') }})
        $results = @()
        
        foreach ($user in $users) {
            try {
                $adUser = Get-ADUser -Identity $user -ErrorAction Stop
                $results += @{
                    Username = $user
                    Exists = $true
                    Enabled = $adUser.Enabled
                    DistinguishedName = $adUser.DistinguishedName
                }
            } catch {
                $results += @{
                    Username = $user
                    Exists = $false
                    Error = $_.Exception.Message
                }
            }
        }
        
        $results | ConvertTo-Json
      register: user_validation
      when: migrated_users is defined and migrated_users | length > 0

    - name: Verify migrated computer accounts exist
      ansible.windows.win_shell: |
        $computers = @({{ migrated_computers | map('quote') | join(',') }})
        $results = @()
        
        foreach ($computer in $computers) {
            try {
                $adComputer = Get-ADComputer -Identity $computer -ErrorAction Stop
                $results += @{
                    ComputerName = $computer
                    Exists = $true
                    Enabled = $adComputer.Enabled
                    DistinguishedName = $adComputer.DistinguishedName
                }
            } catch {
                $results += @{
                    ComputerName = $computer
                    Exists = $false
                    Error = $_.Exception.Message
                }
            }
        }
        
        $results | ConvertTo-Json
      register: computer_validation
      when: migrated_computers is defined and migrated_computers | length > 0

    - name: Verify migrated groups exist
      ansible.windows.win_shell: |
        $groups = @({{ migrated_groups | map('quote') | join(',') }})
        $results = @()
        
        foreach ($group in $groups) {
            try {
                $adGroup = Get-ADGroup -Identity $group -Properties Members -ErrorAction Stop
                $results += @{
                    GroupName = $group
                    Exists = $true
                    MemberCount = ($adGroup.Members | Measure-Object).Count
                    DistinguishedName = $adGroup.DistinguishedName
                }
            } catch {
                $results += @{
                    GroupName = $group
                    Exists = $false
                    Error = $_.Exception.Message
                }
            }
        }
        
        $results | ConvertTo-Json
      register: group_validation
      when: migrated_groups is defined and migrated_groups | length > 0

    - name: Test user authentication
      ansible.windows.win_shell: |
        # Test a sample user's ability to authenticate
        $testUser = "{{ test_username }}"
        $testPassword = ConvertTo-SecureString "{{ test_password }}" -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($testUser, $testPassword)
        
        try {
            # Attempt to get AD info using the test credential
            $session = New-PSSession -ComputerName localhost -Credential $credential
            if ($session) {
                Remove-PSSession $session
                Write-Output "Authentication successful for $testUser"
                exit 0
            }
        } catch {
            Write-Error "Authentication failed for $testUser : $_"
            exit 1
        }
      when: perform_auth_test | default(false)
      no_log: true
      register: auth_test
      ignore_errors: yes

    - name: Verify SID history
      ansible.windows.win_shell: |
        $users = @({{ migrated_users | map('quote') | join(',') }})
        $results = @()
        
        foreach ($user in $users) {
            try {
                $adUser = Get-ADUser -Identity $user -Properties SIDHistory
                $hasSIDHistory = ($adUser.SIDHistory | Measure-Object).Count -gt 0
                
                $results += @{
                    Username = $user
                    HasSIDHistory = $hasSIDHistory
                    SIDHistoryCount = ($adUser.SIDHistory | Measure-Object).Count
                }
            } catch {
                $results += @{
                    Username = $user
                    Error = $_.Exception.Message
                }
            }
        }
        
        $results | ConvertTo-Json
      register: sid_history_validation
      when: 
        - migrated_users is defined
        - verify_sid_history | default(true)

    - name: Check group memberships
      ansible.windows.win_shell: |
        $users = @({{ migrated_users | map('quote') | join(',') }})
        $results = @()
        
        foreach ($user in $users) {
            try {
                $adUser = Get-ADUser -Identity $user -Properties MemberOf
                $groupCount = ($adUser.MemberOf | Measure-Object).Count
                
                $results += @{
                    Username = $user
                    GroupCount = $groupCount
                    Groups = $adUser.MemberOf | ForEach-Object { ($_ -split ',')[0] -replace 'CN=' }
                }
            } catch {
                $results += @{
                    Username = $user
                    Error = $_.Exception.Message
                }
            }
        }
        
        $results | ConvertTo-Json
      register: group_membership_validation

    - name: Test network connectivity from migrated computers
      ansible.windows.win_shell: |
        # Test DNS resolution and domain connectivity
        $targetDC = "{{ target_dc_fqdn }}"
        
        $dnsTest = Resolve-DnsName -Name $targetDC -ErrorAction SilentlyContinue
        $pingTest = Test-Connection -ComputerName $targetDC -Count 2 -Quiet
        $portTest = Test-NetConnection -ComputerName $targetDC -Port 389 -WarningAction SilentlyContinue
        
        $results = @{
            DNSResolution = ($dnsTest -ne $null)
            PingSuccessful = $pingTest
            LDAPPortOpen = $portTest.TcpTestSucceeded
            TargetDC = $targetDC
        }
        
        $results | ConvertTo-Json
      register: network_validation
      delegate_to: "{{ item }}"
      loop: "{{ migrated_computers | default([]) }}"
      when: test_network_connectivity | default(false)

    - name: Generate validation report
      ansible.builtin.template:
        src: validation_report.html.j2
        dest: "{{ validation_output_dir }}/validation_report_{{ migration_batch_id }}.html"
      vars:
        user_results: "{{ user_validation.stdout | default('[]') | from_json }}"
        computer_results: "{{ computer_validation.stdout | default('[]') | from_json }}"
        group_results: "{{ group_validation.stdout | default('[]') | from_json }}"
        sid_results: "{{ sid_history_validation.stdout | default('[]') | from_json }}"
      delegate_to: localhost

    - name: Upload validation results to database
      ansible.builtin.uri:
        url: "https://{{ postgres_host }}/api/validation/results"
        method: POST
        body_format: json
        body:
          batch_id: "{{ migration_batch_id }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          user_validation: "{{ user_validation.stdout | default('[]') | from_json }}"
          computer_validation: "{{ computer_validation.stdout | default('[]') | from_json }}"
          group_validation: "{{ group_validation.stdout | default('[]') | from_json }}"
          sid_history_validation: "{{ sid_history_validation.stdout | default('[]') | from_json }}"
          overall_status: "{{ validation_status }}"
        headers:
          Authorization: "Bearer {{ api_token }}"
      delegate_to: localhost

    - name: Display validation summary
      ansible.builtin.debug:
        msg: |
          Validation Summary for Batch {{ migration_batch_id }}:
          - Users validated: {{ (user_validation.stdout | default('[]') | from_json | length) }}
          - Computers validated: {{ (computer_validation.stdout | default('[]') | from_json | length) }}
          - Groups validated: {{ (group_validation.stdout | default('[]') | from_json | length) }}
          - Overall Status: {{ validation_status }}

  tags:
    - validation
    - post_migration

