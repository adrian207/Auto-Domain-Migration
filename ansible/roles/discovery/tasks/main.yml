---
# Role: discovery
# Purpose: Discover and inventory Active Directory objects for migration
# Target: Source domain controller

- name: Discover Active Directory objects
  block:
    - name: Create discovery output directory
      ansible.builtin.file:
        path: "{{ discovery_output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Discover all users in scope
      ansible.windows.win_shell: |
        $OutputFile = "{{ discovery_temp_dir }}\users.json"
        
        Import-Module ActiveDirectory
        
        $SearchBase = "{{ discovery_search_base }}"
        $ExcludeOUs = @({{ discovery_exclude_ous | map('quote') | join(',') }})
        
        $users = Get-ADUser -Filter * -SearchBase $SearchBase -Properties `
            DisplayName, EmailAddress, Department, Title, Manager, `
            MemberOf, LastLogonDate, Enabled, PasswordLastSet, `
            SamAccountName, UserPrincipalName, DistinguishedName
        
        # Filter out excluded OUs
        $filteredUsers = $users | Where-Object {
            $userDN = $_.DistinguishedName
            $exclude = $false
            foreach ($excludeOU in $ExcludeOUs) {
                if ($userDN -like "*$excludeOU*") {
                    $exclude = $true
                    break
                }
            }
            -not $exclude
        }
        
        # Convert to JSON
        $userData = $filteredUsers | Select-Object `
            @{N='Username';E={$_.SamAccountName}},
            @{N='UPN';E={$_.UserPrincipalName}},
            @{N='DisplayName';E={$_.DisplayName}},
            @{N='Email';E={$_.EmailAddress}},
            @{N='Department';E={$_.Department}},
            @{N='Title';E={$_.Title}},
            @{N='Enabled';E={$_.Enabled}},
            @{N='LastLogon';E={$_.LastLogonDate}},
            @{N='PasswordLastSet';E={$_.PasswordLastSet}},
            @{N='Groups';E={($_.MemberOf | ForEach-Object { ($_ -split ',')[0] -replace 'CN=' }) -join ';'}},
            @{N='DistinguishedName';E={$_.DistinguishedName}}
        
        $userData | ConvertTo-Json -Depth 5 | Out-File $OutputFile -Encoding UTF8
        
        Write-Output "Discovered $($userData.Count) users"
      register: user_discovery

    - name: Fetch user discovery results
      ansible.windows.win_copy:
        src: "{{ discovery_temp_dir }}\\users.json"
        dest: "{{ discovery_output_dir }}/users.json"
        flat: yes
        remote_src: yes
      delegate_to: localhost

    - name: Discover all computers in scope
      ansible.windows.win_shell: |
        $OutputFile = "{{ discovery_temp_dir }}\computers.json"
        
        Import-Module ActiveDirectory
        
        $SearchBase = "{{ discovery_search_base }}"
        $ExcludeOUs = @({{ discovery_exclude_ous | map('quote') | join(',') }})
        
        $computers = Get-ADComputer -Filter * -SearchBase $SearchBase -Properties `
            OperatingSystem, OperatingSystemVersion, IPv4Address, `
            LastLogonDate, Enabled, Description, MemberOf
        
        # Filter out excluded OUs
        $filteredComputers = $computers | Where-Object {
            $compDN = $_.DistinguishedName
            $exclude = $false
            foreach ($excludeOU in $ExcludeOUs) {
                if ($compDN -like "*$excludeOU*") {
                    $exclude = $true
                    break
                }
            }
            -not $exclude
        }
        
        $computerData = $filteredComputers | Select-Object `
            @{N='ComputerName';E={$_.Name}},
            @{N='FQDN';E={$_.DNSHostName}},
            @{N='OS';E={$_.OperatingSystem}},
            @{N='OSVersion';E={$_.OperatingSystemVersion}},
            @{N='IPAddress';E={$_.IPv4Address}},
            @{N='Enabled';E={$_.Enabled}},
            @{N='LastLogon';E={$_.LastLogonDate}},
            @{N='Description';E={$_.Description}},
            @{N='DistinguishedName';E={$_.DistinguishedName}}
        
        $computerData | ConvertTo-Json -Depth 5 | Out-File $OutputFile -Encoding UTF8
        
        Write-Output "Discovered $($computerData.Count) computers"
      register: computer_discovery

    - name: Fetch computer discovery results
      ansible.windows.win_copy:
        src: "{{ discovery_temp_dir }}\\computers.json"
        dest: "{{ discovery_output_dir }}/computers.json"
        flat: yes
        remote_src: yes
      delegate_to: localhost

    - name: Discover all groups in scope
      ansible.windows.win_shell: |
        $OutputFile = "{{ discovery_temp_dir }}\groups.json"
        
        Import-Module ActiveDirectory
        
        $SearchBase = "{{ discovery_search_base }}"
        
        $groups = Get-ADGroup -Filter * -SearchBase $SearchBase -Properties `
            Description, ManagedBy, Members, MemberOf, GroupCategory, GroupScope
        
        $groupData = $groups | Select-Object `
            @{N='GroupName';E={$_.Name}},
            @{N='SamAccountName';E={$_.SamAccountName}},
            @{N='Description';E={$_.Description}},
            @{N='Category';E={$_.GroupCategory}},
            @{N='Scope';E={$_.GroupScope}},
            @{N='MemberCount';E={($_.Members | Measure-Object).Count}},
            @{N='DistinguishedName';E={$_.DistinguishedName}}
        
        $groupData | ConvertTo-Json -Depth 5 | Out-File $OutputFile -Encoding UTF8
        
        Write-Output "Discovered $($groupData.Count) groups"
      register: group_discovery

    - name: Fetch group discovery results
      ansible.windows.win_copy:
        src: "{{ discovery_temp_dir }}\\groups.json"
        dest: "{{ discovery_output_dir }}/groups.json"
        flat: yes
        remote_src: yes
      delegate_to: localhost

    - name: Analyze domain dependencies
      ansible.windows.win_shell: |
        $OutputFile = "{{ discovery_temp_dir }}\dependencies.json"
        
        # Analyze GPO links
        $gpos = Get-GPO -All | Select-Object DisplayName, GpoStatus, CreationTime, ModificationTime
        
        # Analyze DNS zones
        $dnsZones = Get-DnsServerZone | Select-Object ZoneName, ZoneType, IsAutoCreated
        
        # Analyze FSMO roles
        $domain = Get-ADDomain
        $forest = Get-ADForest
        
        $fsmoRoles = @{
            PDCEmulator = $domain.PDCEmulator
            RIDMaster = $domain.RIDMaster
            InfrastructureMaster = $domain.InfrastructureMaster
            SchemaMaster = $forest.SchemaMaster
            DomainNamingMaster = $forest.DomainNamingMaster
        }
        
        $dependencies = @{
            GPOs = $gpos
            DNSZones = $dnsZones
            FSMORoles = $fsmoRoles
            DomainFunctionalLevel = $domain.DomainMode
            ForestFunctionalLevel = $forest.ForestMode
        }
        
        $dependencies | ConvertTo-Json -Depth 5 | Out-File $OutputFile -Encoding UTF8
      register: dependency_analysis

    - name: Fetch dependency analysis results
      ansible.windows.win_copy:
        src: "{{ discovery_temp_dir }}\\dependencies.json"
        dest: "{{ discovery_output_dir }}/dependencies.json"
        flat: yes
        remote_src: yes
      delegate_to: localhost

    - name: Upload discovery results to PostgreSQL
      ansible.builtin.uri:
        url: "https://{{ postgres_host }}/api/discovery/upload"
        method: POST
        body_format: json
        body:
          users: "{{ lookup('file', discovery_output_dir + '/users.json') | from_json }}"
          computers: "{{ lookup('file', discovery_output_dir + '/computers.json') | from_json }}"
          groups: "{{ lookup('file', discovery_output_dir + '/groups.json') | from_json }}"
          dependencies: "{{ lookup('file', discovery_output_dir + '/dependencies.json') | from_json }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          source_domain: "{{ source_domain_fqdn }}"
        headers:
          Authorization: "Bearer {{ api_token }}"
      when: upload_to_database | default(true)
      delegate_to: localhost

    - name: Generate discovery summary report
      ansible.builtin.template:
        src: discovery_report.html.j2
        dest: "{{ discovery_output_dir }}/discovery_report.html"
      vars:
        total_users: "{{ user_discovery.stdout_lines[0] | regex_search('\\d+') }}"
        total_computers: "{{ computer_discovery.stdout_lines[0] | regex_search('\\d+') }}"
        total_groups: "{{ group_discovery.stdout_lines[0] | regex_search('\\d+') }}"
      delegate_to: localhost

    - name: Display discovery summary
      ansible.builtin.debug:
        msg: |
          Discovery Complete:
          - Users: {{ user_discovery.stdout_lines[0] }}
          - Computers: {{ computer_discovery.stdout_lines[0] }}
          - Groups: {{ group_discovery.stdout_lines[0] }}
          - Output: {{ discovery_output_dir }}

  tags:
    - discovery
    - inventory

