---
- name: Self-Healing - Restart Domain Controller Services
  hosts: "{{ target_dc | default('source_dc') }}"
  gather_facts: yes
  
  vars:
    service_name: "{{ service | default('NTDS') }}"
    max_restart_attempts: 3
    restart_delay: 30
    
  tasks:
    - name: Display remediation information
      debug:
        msg:
          - "üîß Self-Healing Action: Domain Controller Service Restart"
          - "Target: {{ inventory_hostname }}"
          - "Service: {{ service_name }}"
          - "Triggered by: {{ alert_name | default('Manual') }}"
    
    - name: Check service exists
      win_service:
        name: "{{ service_name }}"
      register: service_info
      failed_when: false
    
    - name: Fail if service doesn't exist
      fail:
        msg: "Service {{ service_name }} does not exist on {{ inventory_hostname }}"
      when: service_info.exists == false
    
    - name: Get current service status
      win_service:
        name: "{{ service_name }}"
      register: service_status
    
    - name: Log current service state
      debug:
        msg: "Service {{ service_name }} is currently: {{ service_status.state }}"
    
    - name: Restart service
      win_service:
        name: "{{ service_name }}"
        state: restarted
        start_mode: auto
      register: restart_result
      retries: "{{ max_restart_attempts }}"
      delay: "{{ restart_delay }}"
      until: restart_result is succeeded
    
    - name: Wait for service to be running
      win_service:
        name: "{{ service_name }}"
      register: service_check
      until: service_check.state == 'running'
      retries: 10
      delay: 5
    
    - name: Verify service health
      win_shell: |
        $service = Get-Service -Name {{ service_name }}
        if ($service.Status -eq 'Running') {
          Write-Output "HEALTHY: Service is running"
          exit 0
        } else {
          Write-Output "UNHEALTHY: Service is not running"
          exit 1
        }
      register: health_check
      changed_when: false
    
    - name: Log success
      debug:
        msg:
          - "‚úÖ Service {{ service_name }} successfully restarted"
          - "Status: {{ service_check.state }}"
          - "Health: {{ health_check.stdout | trim }}"
    
    - name: Send success notification
      uri:
        url: "{{ alertmanager_webhook_url | default('http://localhost:9093/api/v1/alerts') }}"
        method: POST
        body_format: json
        body:
          - labels:
              alertname: "SelfHealing Success"
              severity: "info"
              job: "{{ ansible_play_name }}"
              instance: "{{ inventory_hostname }}"
            annotations:
              summary: "Service {{ service_name }} restarted successfully"
              description: "Self-healing action completed on {{ inventory_hostname }}"
        status_code: [200, 201]
      when: alertmanager_webhook_url is defined
      failed_when: false
  
  rescue:
    - name: Log failure
      debug:
        msg:
          - "‚ùå Failed to restart service {{ service_name }}"
          - "Error: {{ ansible_failed_result.msg | default('Unknown error') }}"
    
    - name: Send failure notification
      uri:
        url: "{{ alertmanager_webhook_url }}"
        method: POST
        body_format: json
        body:
          - labels:
              alertname: "SelfHealing Failed"
              severity: "critical"
              job: "{{ ansible_play_name }}"
              instance: "{{ inventory_hostname }}"
            annotations:
              summary: "Failed to restart service {{ service_name }}"
              description: "Self-healing action failed on {{ inventory_hostname }}: {{ ansible_failed_result.msg | default('Unknown') }}"
      when: alertmanager_webhook_url is defined
      failed_when: false
    
    - name: Fail the playbook
      fail:
        msg: "Service restart failed after {{ max_restart_attempts }} attempts"

