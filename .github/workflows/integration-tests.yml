name: Integration Tests

on:
  push:
    branches:
      - master
      - main
      - develop
    paths:
      - 'tests/**'
      - 'ansible/files/*.psm1'
      - 'scripts/**/*.ps1'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    paths:
      - 'tests/**'
      - 'ansible/files/*.psm1'
      - 'scripts/**/*.ps1'
      - '.github/workflows/integration-tests.yml'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'Fast'
        type: choice
        options:
          - All
          - Unit
          - Integration
          - Fast
          - Slow
      generate_report:
        description: 'Generate HTML report'
        required: false
        default: true
        type: boolean

env:
  PESTER_VERSION: '5.5.0'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion ${{ env.PESTER_VERSION }} -Force -Scope CurrentUser
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
      
      - name: Run unit tests
        shell: pwsh
        run: |
          cd tests
          .\scripts\Invoke-AllTests.ps1 -TestSuite Unit -OutputPath TestResults -Verbosity Detailed
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: tests/TestResults/*.xml
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: 'tests/TestResults/Unit-results-*.xml'
          check_name: 'Unit Test Results'

  integration-tests:
    name: Integration Tests
    runs-on: windows-latest
    needs: unit-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion ${{ env.PESTER_VERSION }} -Force -Scope CurrentUser
      
      - name: Create test directories
        shell: pwsh
        run: |
          New-Item -Path "C:\ADMT\Batches" -ItemType Directory -Force | Out-Null
          New-Item -Path "C:\ADMT\Logs" -ItemType Directory -Force | Out-Null
          New-Item -Path "C:\ADMT\Reports" -ItemType Directory -Force | Out-Null
          New-Item -Path "C:\Temp\FileServerTest" -ItemType Directory -Force | Out-Null
      
      - name: Run integration tests
        shell: pwsh
        run: |
          cd tests
          .\scripts\Invoke-AllTests.ps1 -TestSuite Integration -OutputPath TestResults -Verbosity Detailed
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: tests/TestResults/*.xml
      
      - name: Upload code coverage
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-coverage
          path: tests/TestResults/*-coverage-*.xml
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: 'tests/TestResults/Integration-results-*.xml'
          check_name: 'Integration Test Results'
      
      - name: Cleanup test environment
        if: always()
        shell: pwsh
        run: |
          cd tests
          .\scripts\Reset-TestEnvironment.ps1 -Force

  infrastructure-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'test-infrastructure')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true
      
      - name: Setup PowerShell
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            Install-Module -Name Pester -MinimumVersion ${{ env.PESTER_VERSION }} -Force -Scope CurrentUser
      
      - name: Run infrastructure tests
        uses: azure/powershell@v1
        with:
          azPSVersion: 'latest'
          inlineScript: |
            cd tests
            pwsh -File scripts/Invoke-AllTests.ps1 -TestSuite Infrastructure -OutputPath TestResults -Verbosity Detailed
        continue-on-error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: infrastructure-test-results
          path: tests/TestResults/*.xml

  fast-tests:
    name: Fast Test Suite
    runs-on: windows-latest
    if: github.event.inputs.test_suite == 'Fast' || github.event.inputs.test_suite == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion ${{ env.PESTER_VERSION }} -Force -Scope CurrentUser
      
      - name: Create test directories
        shell: pwsh
        run: |
          New-Item -Path "C:\ADMT\Batches" -ItemType Directory -Force | Out-Null
          New-Item -Path "C:\Temp\FileServerTest" -ItemType Directory -Force | Out-Null
      
      - name: Run fast tests
        shell: pwsh
        run: |
          cd tests
          .\scripts\Invoke-AllTests.ps1 -TestSuite Fast -OutputPath TestResults -Verbosity Normal -GenerateReport:$${{ github.event.inputs.generate_report == 'true' }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: fast-test-results
          path: tests/TestResults/*
      
      - name: Cleanup
        if: always()
        shell: pwsh
        run: |
          cd tests
          .\scripts\Reset-TestEnvironment.ps1 -Force

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate summary
        run: |
          echo "## 🧪 Integration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.infrastructure-tests.result }}" == "success" ]; then
            echo "✅ **Infrastructure Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.infrastructure-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Infrastructure Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Infrastructure Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Unit test results" >> $GITHUB_STEP_SUMMARY
          echo "- Integration test results" >> $GITHUB_STEP_SUMMARY
          echo "- Code coverage reports" >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall status
        if: |
          needs.unit-tests.result == 'failure' ||
          needs.integration-tests.result == 'failure'
        run: exit 1

