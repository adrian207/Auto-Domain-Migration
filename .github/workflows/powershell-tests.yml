name: PowerShell Tests

on:
  push:
    branches:
      - master
      - main
      - develop
    paths:
      - '**.ps1'
      - '**.psm1'
      - '.github/workflows/powershell-tests.yml'
  pull_request:
    paths:
      - '**.ps1'
      - '**.psm1'
      - '.github/workflows/powershell-tests.yml'
  workflow_dispatch:

jobs:
  pslint:
    name: PSScriptAnalyzer
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
      
      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = @()
          
          # Scan all PowerShell files
          $files = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse | 
                   Where-Object { $_.FullName -notmatch '[\\/]\.git[\\/]' }
          
          foreach ($file in $files) {
              Write-Host "Analyzing: $($file.FullName)"
              $analysis = Invoke-ScriptAnalyzer -Path $file.FullName -Severity Warning,Error
              
              if ($analysis) {
                  $results += $analysis
                  foreach ($result in $analysis) {
                      $severity = $result.Severity.ToString().ToUpper()
                      $message = "$($result.RuleName): $($result.Message)"
                      $location = "$($file.Name):$($result.Line):$($result.Column)"
                      
                      if ($result.Severity -eq 'Error') {
                          Write-Host "::error file=$($file.Name),line=$($result.Line),col=$($result.Column)::$message"
                      } else {
                          Write-Host "::warning file=$($file.Name),line=$($result.Line),col=$($result.Column)::$message"
                      }
                  }
              }
          }
          
          Write-Host "`nTotal issues found: $($results.Count)"
          
          # Fail if errors found
          $errors = $results | Where-Object { $_.Severity -eq 'Error' }
          if ($errors) {
              Write-Host "::error::Found $($errors.Count) error(s)"
              exit 1
          }
          
          if ($results.Count -eq 0) {
              Write-Host "✅ No issues found!"
          }
      
      - name: Generate SARIF Report
        if: always()
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse | 
                   Where-Object { $_.FullName -notmatch '[\\/]\.git[\\/]' }
          
          $allResults = @()
          foreach ($file in $files) {
              $analysis = Invoke-ScriptAnalyzer -Path $file.FullName
              if ($analysis) {
                  $allResults += $analysis
              }
          }
          
          # Save results for artifact
          $allResults | ConvertTo-Json -Depth 10 | Out-File pslint-results.json

      - name: Upload PSScriptAnalyzer Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pslint-results
          path: pslint-results.json

  pester-tests:
    name: Pester Unit Tests
    runs-on: windows-latest
    needs: pslint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Pester
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -MinimumVersion 5.0.0 -Force -Scope CurrentUser
      
      - name: Run Pester Tests
        shell: pwsh
        run: |
          Import-Module Pester
          
          $config = New-PesterConfiguration
          $config.Run.Path = '.'
          $config.Run.PassThru = $true
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.Path = @('ansible/files/*.psm1', 'scripts/**/*.ps1')
          $config.TestResult.Enabled = $true
          $config.TestResult.OutputPath = 'test-results.xml'
          $config.TestResult.OutputFormat = 'NUnitXml'
          $config.Output.Verbosity = 'Detailed'
          
          $result = Invoke-Pester -Configuration $config
          
          Write-Host "`n========================================" -ForegroundColor Cyan
          Write-Host "  Pester Test Summary" -ForegroundColor Cyan
          Write-Host "========================================" -ForegroundColor Cyan
          Write-Host "Total Tests: $($result.TotalCount)"
          Write-Host "Passed: $($result.PassedCount)" -ForegroundColor Green
          Write-Host "Failed: $($result.FailedCount)" -ForegroundColor $(if ($result.FailedCount -gt 0) { 'Red' } else { 'Green' })
          Write-Host "Skipped: $($result.SkippedCount)" -ForegroundColor Yellow
          Write-Host "Code Coverage: $([math]::Round($result.CodeCoverage.CoveragePercent, 2))%" -ForegroundColor Cyan
          
          if ($result.FailedCount -gt 0) {
              Write-Host "`n::error::$($result.FailedCount) test(s) failed"
              exit 1
          }
          
          Write-Host "`n✅ All tests passed!" -ForegroundColor Green
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          files: 'test-results.xml'
          check_name: 'Pester Test Results'
      
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pester-test-results
          path: test-results.xml
      
      - name: Code Coverage Summary
        if: always()
        shell: pwsh
        run: |
          if (Test-Path 'test-results.xml') {
              Write-Host "## Test Results" >> $env:GITHUB_STEP_SUMMARY
              Write-Host "" >> $env:GITHUB_STEP_SUMMARY
              Write-Host "✅ Pester tests completed" >> $env:GITHUB_STEP_SUMMARY
              Write-Host "See artifacts for detailed results" >> $env:GITHUB_STEP_SUMMARY
          }

  powershell-matrix:
    name: Cross-Platform PowerShell Tests
    runs-on: ${{ matrix.os }}
    needs: pslint
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        powershell-version: ['7.3', '7.4']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup PowerShell
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'
      
      - name: Install PowerShell (if needed)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if ! command -v pwsh &> /dev/null; then
            echo "PowerShell not found, installing..."
            # Installation handled by GitHub Actions runner
          fi
          pwsh --version
      
      - name: Run Syntax Check
        shell: pwsh
        run: |
          $errors = @()
          Get-ChildItem -Path . -Include *.ps1,*.psm1 -Recurse | 
              Where-Object { $_.FullName -notmatch '[\\/]\.git[\\/]' } |
              ForEach-Object {
                  try {
                      $null = [System.Management.Automation.PSParser]::Tokenize(
                          (Get-Content $_.FullName -Raw), 
                          [ref]$null
                      )
                      Write-Host "✅ $($_.Name) - Syntax OK"
                  } catch {
                      $errors += "❌ $($_.Name) - Syntax Error: $_"
                      Write-Host "::error file=$($_.Name)::Syntax Error: $_"
                  }
              }
          
          if ($errors.Count -gt 0) {
              Write-Host "`n$($errors.Count) file(s) have syntax errors"
              exit 1
          }
          Write-Host "`n✅ All PowerShell files have valid syntax on ${{ matrix.os }}"

  summary:
    name: PowerShell Tests Summary
    runs-on: ubuntu-latest
    needs: [pslint, pester-tests, powershell-matrix]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## PowerShell Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.pslint.result }}" == "success" ]; then
            echo "✅ PSScriptAnalyzer: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ PSScriptAnalyzer: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.pester-tests.result }}" == "success" ]; then
            echo "✅ Pester Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Pester Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.powershell-matrix.result }}" == "success" ]; then
            echo "✅ Cross-Platform Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Cross-Platform Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "PowerShell validation complete! 🚀" >> $GITHUB_STEP_SUMMARY
      
      - name: Fail if critical checks failed
        if: |
          needs.pslint.result == 'failure' ||
          needs.pester-tests.result == 'failure'
        run: exit 1

