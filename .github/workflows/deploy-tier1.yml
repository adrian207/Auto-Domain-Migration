name: Deploy Tier 1 (Demo)

on:
  workflow_dispatch:
    inputs:
      azure_subscription:
        description: 'Azure Subscription ID'
        required: true
      resource_group:
        description: 'Resource Group Name'
        required: true
        default: 'admt-tier1-rg'
      location:
        description: 'Azure Region'
        required: true
        default: 'eastus'
      destroy:
        description: 'Destroy infrastructure after deployment (for testing)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  TIER_PATH: 'terraform/azure-free-tier'

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: |
          cd ${{ env.TIER_PATH }}
          terraform fmt -check -recursive
      
      - name: Terraform Init
        run: |
          cd ${{ env.TIER_PATH }}
          terraform init -backend=false
      
      - name: Terraform Validate
        run: |
          cd ${{ env.TIER_PATH }}
          terraform validate

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TIER_PATH }}
          terraform init \
            -backend-config="resource_group_name=${{ github.event.inputs.resource_group }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=tier1.tfstate"
      
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ env.TIER_PATH }}
          terraform plan \
            -var="subscription_id=${{ github.event.inputs.azure_subscription }}" \
            -var="location=${{ github.event.inputs.location }}" \
            -out=tfplan \
            -no-color
      
      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-tier1
          path: ${{ env.TIER_PATH }}/tfplan

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: plan
    environment:
      name: tier1-demo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TIER_PATH }}
          terraform init \
            -backend-config="resource_group_name=${{ github.event.inputs.resource_group }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=tier1.tfstate"
      
      - name: Download Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan-tier1
          path: ${{ env.TIER_PATH }}
      
      - name: Terraform Apply
        id: apply
        run: |
          cd ${{ env.TIER_PATH }}
          terraform apply -auto-approve tfplan
      
      - name: Get Outputs
        id: outputs
        run: |
          cd ${{ env.TIER_PATH }}
          terraform output -json > outputs.json
          cat outputs.json
      
      - name: Upload Outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-tier1
          path: ${{ env.TIER_PATH }}/outputs.json
      
      - name: Deployment Summary
        run: |
          echo "## 🚀 Tier 1 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ github.event.inputs.resource_group }}" >> $GITHUB_STEP_SUMMARY
          echo "**Location:** ${{ github.event.inputs.location }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Access the Azure Portal to view resources" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure domain controllers" >> $GITHUB_STEP_SUMMARY
          echo "3. Generate test data: \`scripts/ad-test-data/Generate-ADTestData.ps1 -Tier Tier1\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Run Ansible playbooks for migration" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: Terraform Destroy (Optional)
    runs-on: ubuntu-latest
    needs: apply
    if: github.event.inputs.destroy == 'true'
    environment:
      name: tier1-demo-destroy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        run: |
          cd ${{ env.TIER_PATH }}
          terraform init \
            -backend-config="resource_group_name=${{ github.event.inputs.resource_group }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=tier1.tfstate"
      
      - name: Terraform Destroy
        run: |
          cd ${{ env.TIER_PATH }}
          terraform destroy \
            -var="subscription_id=${{ github.event.inputs.azure_subscription }}" \
            -var="location=${{ github.event.inputs.location }}" \
            -auto-approve
      
      - name: Destruction Summary
        run: |
          echo "## 🗑️ Tier 1 Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All resources in **${{ github.event.inputs.resource_group }}** have been destroyed." >> $GITHUB_STEP_SUMMARY

